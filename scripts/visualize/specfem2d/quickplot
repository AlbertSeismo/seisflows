#!/usr/bin/env python

import os
import re
import sys
import numpy as np

from glob import glob
from os.path import abspath, join
from subprocess import call
from seisflows.tools.tools import exists
from seisflows.tools.unix import which


def get_coord_files(dir):
    for files in [
        [abspath(join(dir, subdir, 'proc000000_x.bin')),
         abspath(join(dir, subdir, 'proc000000_z.bin'))]
         for subdir in [
         '.',
         '../model',
         '../output/model_init',
         '../../output/model_init',
         '../../../output/model_init',
         '../../../../output/model_init',
         ]]:
        if exists(files):
            return files


def get_data_files(dir):
    files = []
    for file in glob(dir+'/'+'proc000000*.bin*'):
        if 'jacobian' in file or \
           'ibool' in file or \
           'x.bin' in file or \
           'z.bin' in file:
            continue
        files += [file]
    return sorted(files)


def get_title(file):
    pattern = '.*proc000000_(.*).bin'
    return re.match(pattern, file).group(1)


def get_args(file):
    args = []
    args += ['--title='+get_title(file)]
    if '_kernel' in file:
        args += ['--saturation=1']
        args += ['--symmetric=1']

    # command line arguments, if given, line will override those above
    nargs = len(sys.argv[2:])
    if nargs:
        args += sys.argv[2:]

    return args


def get_cmd(exe, dir, file):
    return ' '.join(
        [exe]+
        get_coord_files(dir)+
        [file]+
        get_args(file)
        )


def parse_args():
    assert len(sys.argv[1:]) >= 1
    return sys.argv[1]



if __name__ == '__main__':
    """ Plots all model or kernels in a given directory; wrapper over PLOTGLL
        USAGE:  quickplot DIR [ARGS]
    """
    dir = parse_args()
    exe = 'python -W ignore '+which('plotgll')

    if not exists(dir):
        raise Exception

    if not which('plotgll'):
        raise Exception

    files = get_data_files(dir)
    cmd = '&&\n\n'.join([get_cmd(exe, dir, file) for file in files])

    call(cmd, shell=True)

